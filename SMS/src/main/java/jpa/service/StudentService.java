package jpa.service;

import java.util.List;
import java.util.logging.Level;

import javax.persistence.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import jpa.dao.StudentDAO;
import jpa.entitymodels.Course;
import jpa.entitymodels.Student;

public class StudentService implements StudentDAO {
	private Student student;
	// StudentDAO creates an Student object when its obj is created
	public StudentService() {
		this.student = new Student();
	}

	/**
	 * This method takes a Student’s email as a String and parses the student list
	 * for a Student with that email and returns a Student Object.
	 */
	public Student getStudentByEmail(String sEmail) {
		java.util.logging.Logger.getLogger("org.hibernate").setLevel(Level.OFF);
		SessionFactory factory = new Configuration().configure().buildSessionFactory();
		Session session = factory.openSession();
		Transaction t = session.beginTransaction();
		Query sQ = session.createQuery(StudentSQL.get_Student_By_Email.getQuery());
		sQ.setParameter("sEmail", sEmail);
		Student s = (Student) sQ.getSingleResult();
		t.commit();
		session.close();
		factory.close();
		return s;
	}

	/**
	 * This method reads the student table in your database and returns the data as
	 * a List Student
	 */
	public List<Student> getAllStudents() {
		java.util.logging.Logger.getLogger("org.hibernate").setLevel(Level.OFF);
		SessionFactory factory = new Configuration().configure().buildSessionFactory();
		Session session = factory.openSession();
		Transaction t = session.beginTransaction();
		Query sQ = session.createQuery(StudentSQL.get_All_Students.getQuery());
		@SuppressWarnings("unchecked")
		List<Student> list = sQ.getResultList();
		t.commit();
		session.close();
		factory.close();
		return list;
	}

	/**
	 * This method takes two parameters: the first one is the user email and the
	 * second one is the password from the user input. Return whether or not a
	 * student was found.
	 */
	public boolean validateStudent(String sEmail, String sPassword) {
		// Student student = new Student(sEmail, "validate student", sPassword);
		Student studentDB;
		try {
			studentDB = this.getStudentByEmail(sEmail);
		} catch (Exception e) {
			System.out.println("Wrong Credentials! No student found!");
			return false;
		}
		if (studentDB.getsEmail().equals(sEmail) && studentDB.getsPass().equals(sPassword)) {
			return true;
		} else {
			System.out.println("Wrong Credentials! Wrong password!");
			return false;
		}
	}

	/**
	 * registerStudentToCourse –After a successful student validation, this method
	 * takes a Student’s email and a Course ID. It checks in the join table (i.e.
	 * Student_Course) generated by JPA to find if a Student with that Email is
	 * currently attending a Course with that ID. If the Student is not attending
	 * that Course, register the student for that course; otherwise not.
	 */
	public void registerStudentToCourse(String sEmail, int cId) {
		java.util.logging.Logger.getLogger("org.hibernate").setLevel(Level.OFF);
		SessionFactory factory = new Configuration().configure().buildSessionFactory();
		Session session = factory.openSession();
		Transaction t = session.beginTransaction();
		CourseService cs = new CourseService();
		Student student = this.getStudentByEmail(sEmail);
		Course course = cs.getCourseById(cId);
		if (!student.getsCourses().contains(course)) {
			student.getsCourses().add(course);
			session.saveOrUpdate(student);
			
		} else {
			System.out.println("This course has been registed already! Please choose another one!");
			System.out.println("All Courses:");
			for (Course c : cs.getAllCourses()) {
				System.out.println(c);
			}
		}
			t.commit();
			session.close();
			factory.close();
	}

	/**
	 * This method takes a Student’s Email as a parameter and would find all the courses a student is registered for.
	 */
	public List<Course> getStudentCourses(String sEmail) {
		Student s = this.getStudentByEmail(sEmail);

		for (Course c : s.getsCourses()) {
			System.out.println(c);
		}
		return s.getsCourses();
	}

}
